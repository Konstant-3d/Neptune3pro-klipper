# KST start_end_purge macro v0.3
# Upload this file to your config directory
# Add line
# [include start_end_purge.cfg]
# Add start gcode
#   prusa: START_PRINT EXTRUDER_TEMP={first_layer_temperature[0]} BED_TEMP={first_layer_bed_temperature[0]}
#   !!important!! in prusa disable automatic inserting temperature commands to G-code in printer settings
#   orca: START_PRINT EXTRUDER_TEMP=[nozzle_temperature_initial_layer] BED_TEMP=[bed_temperature_initial_layer_single]
# Add end code
#   END_PRINT
# To disable purge line execute LINE_PURGE_DISABLE in console (LINE_PURGE_ENABLE to enable again)
# 
[gcode_macro START_PRINT]
description: Start print script, warm bed and nozzle and draw purge line.
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set purgeline_enable = printer["gcode_macro _SEP_Settings"].purgeline_enable | abs %}
    {% set travel_speed = (printer["gcode_macro _SEP_Settings"].travel_speed) * 60 | float %}

    G90 ;Use absolute coordinates
    G21 ; set units to millimeters
    M220 S100 ;Reset Feedrate
    M221 S100 ;Reset Flowrate
    
    SET_GCODE_OFFSET Z=0.0 ;Reset the G-Code Z offset (adjust Z offset if needed)

    # Turn ON HeadLight
    {% if printer["led Head_Light"] is defined %}
        SET_LED LED=Head_Light WHITE=1
    {% endif %}

    #M104 S{EXTRUDER_TEMP - 60} ; set temporary nozzle temp to prevent oozing during homing
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=140  ; Set and heat the final extruder temperature

    #M190 S{BED_TEMP} ; wait for bed temp to stabilize
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}  ; Heat Bed to target temp
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP-2} MAXIMUM={BED_TEMP+4}  ; Waits until the bed reaches close to target

    G28 ;home
    ;G29 ; run abl mesh
    ;M420 S1 ; load mesh
    G1 Z10 F240

    #M104 S{EXTRUDER_TEMP} ; set target nozzle temp
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}  ; Set and heat the final extruder temperature

    {% if purgeline_enable == True %}
        LINE_PURGE EXTRUDER_TEMP={EXTRUDER_TEMP}
    {% else %}
        G0 Y50 F{travel_speed}
        #M109 S{EXTRUDER_TEMP} ; wait for nozzle temp to stabilize
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}  ; Set and heat the final extruder temperature
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP-4} MAXIMUM={EXTRUDER_TEMP+10}  ; Wait for extruder to reach near target temperature
    {% endif %}

    G90 ; use absolute coordinates
    M82 ; use absolute distances for extrusion
    G92 E0

[gcode_macro END_PRINT]
gcode:
    {% set travel_speed = (printer["gcode_macro _SEP_Settings"].travel_speed | default(printer.configfile.settings.printer.max_velocity) | float) * 60 / 2 %}
    {% set travel_speed_z = (printer["gcode_macro _SEP_Settings"].travel_speed_z | default(printer.configfile.settings.printer.max_z_velocity) | float) * 60 %}
    {% set act = printer.gcode_move.gcode_position %}
    {% set max = printer.toolhead.axis_maximum %}
    # Turn off bed, extruder, and fan
    M140 S0 ; turn off heatbed
    M104 S0 ; turn off nozzle
    M106 S0 ; turn off fan
    # Move nozzle away from print while retracting
    G91 ; use relative coordinates 
    G1 E-3 F300 ; retract 3mm (Sorkin recomend 10mm)
    G90 ; use absolute coordinates
    # Present print
    {% if (act.z + 2) < max.z %}
        G1 Z{act.z + 2} F{travel_speed_z} ; Move print head up
    {% endif %}
    G1 X5 Y{max.y * 0.8} F{travel_speed} ; Present print
    {% set target_z = [[(act.z + 70), (max.z * 0.4)]|max, (max.z - 10)] | min %}
    {% if (act.z) < (target_z) %}
        G1 Z{target_z} F{travel_speed_z} ; Move print head further up
    {% endif %}
    # Disable steppers
    M84
    # Turn OFF HeadLight
    {% if printer["led Head_Light"] is defined %}
        SET_LED LED=Head_Light WHITE=0
    {% endif %}
    #G1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_maximum.y - 5}

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}

    {% if EXTRUDER_TEMP < 170 %}

        {action_respond_info("[Extruder] EXTRUDER_TEMP is insufficient for purge. Purge skipped. Print CANCELED.")}
        CANCEL_PRINT

    {% else %}

        # Get relevant printer params
        {% set travel_speed = (printer["gcode_macro _SEP_Settings"].travel_speed | default(printer.configfile.settings.printer.max_velocity) | float) * 60 %}
        {% set travel_speed_z = (printer["gcode_macro _SEP_Settings"].travel_speed_z | default(printer.configfile.settings.printer.max_z_velocity) | float) * 60 %}
        
        # Get purge settings from _SEP_Settings
        {% set verbose_enable = printer["gcode_macro _SEP_Settings"].verbose_enable | default(True) | abs %}
        {% set purge_height = printer["gcode_macro _SEP_Settings"].purge_height | default(0.3) | float %}
        {% set purge_width = printer["gcode_macro _SEP_Settings"].purge_width | default(0.8) | float %}
        {% set tip_distance = printer["gcode_macro _SEP_Settings"].tip_distance | default(0) | float %}
        {% set purge_margin = printer["gcode_macro _SEP_Settings"].purge_margin | default(10) | float %}
        {% set purge_length_first = printer["gcode_macro _SEP_Settings"].purge_length | default(100) | float %}
        {% set purge_length_diff = printer["gcode_macro _SEP_Settings"].purge_length_diff | default(20) | float %}
        {% set purge_length_second = purge_length_first - purge_length_diff %}
        {% set flow_rate = printer["gcode_macro _SEP_Settings"].flow_rate | default(5) | float %}

        # Use firmware retraction if it is defined
        {% if printer.firmware_retraction is defined %}
            {% set RETRACT = G10 | string %}
            {% set UNRETRACT = G11 | string %}
        {% else %}
            {% set RETRACT = 'G1 E-' ~ (printer["gcode_macro _SEP_Settings"].retract_length | string) ~ ' F' ~ ((printer["gcode_macro _SEP_Settings"].retract_speed * 60) | string) | string %} ;{% set RETRACT = 'G1 E-.5 F2100' | string %}
            {% set UNRETRACT = 'G1 E' ~ (printer["gcode_macro _SEP_Settings"].retract_length | string) ~ ' F' ~ ((printer["gcode_macro _SEP_Settings"].retract_speed * 60) | string) | string %} ;{% set UNRETRACT = 'G1 E.5 F2100' | string %}
        {% endif %}

        {% set purge_x_min = 0 %}
        {% set purge_x_max = 235 %}
        {% set purge_x_origin = ([((purge_x_max + purge_x_min) / 2) - (purge_length_first / 2), 0] | max) %} ;Create center point of purge line relative to print on X axis
        {% set purge_y_origin = 1 %}

        # Calculate purge speed
        {% set purge_move_speed = (flow_rate / (purge_height * purge_width)) * 60 | float %}
        {% set purge_filament_length_first = ((purge_height * purge_width * purge_length_first) / 2.4) | float %}
        {% set purge_filament_length_second = ((purge_height * purge_width * purge_length_second) / 2.4) | float %}

        {% if verbose_enable == True %}

            {action_respond_info("Moving filament tip {}mms".format(                                                                 
                (tip_distance),                                                                                      
            )) }

            {% if printer.firmware_retraction is defined %}
                {action_respond_info("SEP purge is using firmware retraction.")}
            {% else %}
                {action_respond_info("SEP purge is not using firmware retraction, it is recommended to configure it.")}
            {% endif %}

            {action_respond_info("SEP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(                                                                 
                (purge_x_origin),
                (purge_y_origin),
                (purge_filament_length_first + purge_filament_length_second),
                (flow_rate),
            )) }

        {% endif %}

        SAVE_GCODE_STATE NAME=Prepurge_State                                                    # Create gcode state

        {% if purge_y_origin > 0 %}                                                             # If there's room on Y, purge along X axis in front of print area

            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_origin} Y{purge_y_origin}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            
            #M109 S{EXTRUDER_TEMP}                                                              # wait for nozzle temp to stabilize
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}                       # Set and heat the final extruder temperature
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP-4} MAXIMUM={EXTRUDER_TEMP+10}  # Wait for extruder to reach near target temperature

            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 X{purge_x_origin - 2} F{purge_move_speed}                                        # Small travel <-
            G1 X{purge_x_origin} F{purge_move_speed}                                            # Small travel ->
            G1 X{purge_x_origin + purge_length_first} E{purge_filament_length_first} F{purge_move_speed}    # Purge line ->
            G1 Y{purge_y_origin + purge_width}                                                  # Slide to next line
            G1 X{purge_x_origin + purge_length_diff} E{purge_filament_length_second} F{purge_move_speed}                   # Purge line <-
            {RETRACT}                                                                           # Retract
            G0 X{purge_x_origin + purge_length_diff + 10} Y{purge_y_origin + 10} F{travel_speed}                    # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed_z}                                            # Z hop

        {% endif %}

        RESTORE_GCODE_STATE NAME=Prepurge_State                                                 # Restore gcode state

    {% endif %}

[gcode_macro LINE_PURGE_ENABLE]
description: Enable LINE_PURGE in START_PRINT
gcode:
  SET_GCODE_VARIABLE MACRO=_SEP_Settings VARIABLE=purgeline_enable VALUE=True

[gcode_macro LINE_PURGE_DISABLE]
description: Disable LINE_PURGE in START_PRINT
gcode:
  SET_GCODE_VARIABLE MACRO=_SEP_Settings VARIABLE=purgeline_enable VALUE=False

[gcode_macro _SEP_Settings]
description: This macro contains all adjustable settings for SEP script 
# The following variables are settings for SEP as a whole.
variable_verbose_enable: True               # Set to True to enable SEP information output when running. This is useful for debugging.
# The following variables are for adjusting adaptive purge settings for SEP.
variable_purge_height: 0.2                  # Z position of nozzle during purge, default is 0.3.
variable_purge_width: 0.8                   # Z position of nozzle during purge, default is 0.8.
variable_tip_distance: 0                    # Distance between tip of filament and nozzle before purge. Should be similar to PRINT_END final retract amount.
variable_purge_margin: 10                   # Distance the purge will be in front of the print area, default is 10.
variable_purge_length: 100                  # Pruge line length, default is 100.
variable_purge_length_diff: 20              # Length to make second line shorter, default is 20.
variable_flow_rate: 5                       # Flow rate of purge in mm3/s. Default is 5.
variable_travel_speed: 200                  # Travel speed. Default is printer.configfile.settings.printer.max_velocity (previous printer.toolhead.max_velocity).
variable_travel_speed_z: 5                  # Travel speed. Default is printer.configfile.settings.printer.max_z_velocity.
variable_retract_speed: 30                  # Retract speed. Default is 35.
variable_retract_length: 0.8                # Retract amount. Default is 0.5.
variable_purgeline_enable: True             # Draw or not draw purge line


gcode: # Gcode section left intentionally blank. Do not disturb.
    {action_respond_info(" Running the SEP_Settings macro does nothing, it is only used for storing SEP settings. ")}
